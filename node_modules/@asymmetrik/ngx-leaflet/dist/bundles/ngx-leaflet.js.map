{"version":3,"file":"ngx-leaflet.js","sources":["../leaflet/core/leaflet.directive.js","../leaflet/core/leaflet.directive.wrapper.js","../leaflet/layers/leaflet-layer.directive.js","../leaflet/layers/leaflet-layers.directive.js","../leaflet/layers/control/leaflet-control-layers-changes.model.js","../leaflet/layers/control/leaflet-control-layers.wrapper.js","../leaflet/layers/control/leaflet-control-layers-config.model.js","../leaflet/layers/control/leaflet-control-layers.directive.js","../leaflet/core/leaflet.util.js","../leaflet/layers/base/leaflet-baselayers.directive.js","../leaflet/leaflet.module.js","../leaflet/layers/leaflet-tile-layer-definition.model.js"],"sourcesContent":["import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport { latLng, map } from 'leaflet';\nvar LeafletDirective = /** @class */ (function () {\n    function LeafletDirective(el) {\n        this.DEFAULT_ZOOM = 1;\n        this.DEFAULT_CENTER = latLng(38.907192, -77.036871);\n        this.DEFAULT_FPZ_OPTIONS = {};\n        this.fitBoundsOptions = this.DEFAULT_FPZ_OPTIONS;\n        this.panOptions = this.DEFAULT_FPZ_OPTIONS;\n        this.zoomOptions = this.DEFAULT_FPZ_OPTIONS;\n        this.zoomPanOptions = this.DEFAULT_FPZ_OPTIONS;\n        // Default configuration\n        this.options = {};\n        // Configure callback function for the map\n        this.mapReady = new EventEmitter();\n        this.element = el;\n    }\n    LeafletDirective.prototype.ngOnInit = function () {\n        // Create the map with some reasonable defaults\n        this.map = map(this.element.nativeElement, this.options);\n        // Only setView if there is a center/zoom\n        if (null != this.center && null != this.zoom) {\n            this.setView(this.center, this.zoom);\n        }\n        // Set up all the initial settings\n        if (null != this.fitBounds) {\n            this.setFitBounds(this.fitBounds);\n        }\n        this.doResize();\n        // Fire map ready event\n        this.mapReady.emit(this.map);\n    };\n    LeafletDirective.prototype.ngOnChanges = function (changes) {\n        /*\n         * The following code is to address an issue with our (basic) implementation of\n         * zooming and panning. From our testing, it seems that a pan operation followed\n         * by a zoom operation in the same thread will interfere with eachother. The zoom\n         * operation interrupts/cancels the pan, resulting in a final center point that is\n         * inaccurate. The solution seems to be to either separate them with a timeout or\n          * to collapse them into a setView call.\n         */\n        // Zooming and Panning\n        if (changes['zoom'] && changes['center'] && null != this.zoom && null != this.center) {\n            this.setView(changes['center'].currentValue, changes['zoom'].currentValue);\n        }\n        else if (changes['zoom']) {\n            this.setZoom(changes['zoom'].currentValue);\n        }\n        else if (changes['center']) {\n            this.setCenter(changes['center'].currentValue);\n        }\n        // Fit bounds\n        if (changes['fitBounds']) {\n            this.setFitBounds(changes['fitBounds'].currentValue);\n        }\n    };\n    LeafletDirective.prototype.getMap = function () {\n        return this.map;\n    };\n    LeafletDirective.prototype.onResize = function () {\n        this.delayResize();\n    };\n    /**\n     * Resize the map to fit it's parent container\n     */\n    LeafletDirective.prototype.doResize = function () {\n        // Invalidate the map size to trigger it to update itself\n        this.map.invalidateSize({});\n    };\n    /**\n     * Manage a delayed resize of the component\n     */\n    LeafletDirective.prototype.delayResize = function () {\n        if (null != this.resizeTimer) {\n            clearTimeout(this.resizeTimer);\n        }\n        this.resizeTimer = setTimeout(this.doResize.bind(this), 200);\n    };\n    /**\n     * Set the view (center/zoom) all at once\n     * @param center The new center\n     * @param zoom The new zoom level\n     */\n    LeafletDirective.prototype.setView = function (center, zoom) {\n        if (this.map && null != center && null != zoom) {\n            this.map.setView(center, zoom, this.zoomPanOptions);\n        }\n    };\n    /**\n     * Set the map zoom level\n     * @param zoom the new zoom level for the map\n     */\n    LeafletDirective.prototype.setZoom = function (zoom) {\n        if (this.map && null != zoom) {\n            this.map.setZoom(zoom, this.zoomOptions);\n        }\n    };\n    /**\n     * Set the center of the map\n     * @param center the center point\n     */\n    LeafletDirective.prototype.setCenter = function (center) {\n        if (this.map && null != center) {\n            this.map.panTo(center, this.panOptions);\n        }\n    };\n    /**\n     * Fit the map to the bounds\n     * @param center the center point\n     */\n    LeafletDirective.prototype.setFitBounds = function (latLngBounds) {\n        if (this.map && null != latLngBounds) {\n            this.map.fitBounds(latLngBounds, this.fitBoundsOptions);\n        }\n    };\n    LeafletDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[leaflet]'\n                },] },\n    ];\n    /** @nocollapse */\n    LeafletDirective.ctorParameters = function () { return [\n        { type: ElementRef, },\n    ]; };\n    LeafletDirective.propDecorators = {\n        'fitBoundsOptions': [{ type: Input, args: ['leafletFitBoundsOptions',] },],\n        'panOptions': [{ type: Input, args: ['leafletPanOptions',] },],\n        'zoomOptions': [{ type: Input, args: ['leafletZoomOptions',] },],\n        'zoomPanOptions': [{ type: Input, args: ['leafletZoomPanOptions',] },],\n        'options': [{ type: Input, args: ['leafletOptions',] },],\n        'mapReady': [{ type: Output, args: ['leafletMapReady',] },],\n        'zoom': [{ type: Input, args: ['leafletZoom',] },],\n        'center': [{ type: Input, args: ['leafletCenter',] },],\n        'fitBounds': [{ type: Input, args: ['leafletFitBounds',] },],\n        'onResize': [{ type: HostListener, args: ['window:resize', [],] },],\n    };\n    return LeafletDirective;\n}());\nexport { LeafletDirective };\n//# sourceMappingURL=leaflet.directive.js.map","var LeafletDirectiveWrapper = /** @class */ (function () {\n    function LeafletDirectiveWrapper(leafletDirective) {\n        this.leafletDirective = leafletDirective;\n    }\n    LeafletDirectiveWrapper.prototype.init = function () {\n        // Nothing for now\n    };\n    LeafletDirectiveWrapper.prototype.getMap = function () {\n        return this.leafletDirective.getMap();\n    };\n    return LeafletDirectiveWrapper;\n}());\nexport { LeafletDirectiveWrapper };\n//# sourceMappingURL=leaflet.directive.wrapper.js.map","import { Directive, Input } from '@angular/core';\nimport { LeafletDirective } from '../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';\n/**\n * Layer directive\n *\n * This directive is used to directly control a single map layer. The purpose of this directive is to\n * be used as part of a child structural directive of the map element.\n *\n */\nvar LeafletLayerDirective = /** @class */ (function () {\n    function LeafletLayerDirective(leafletDirective) {\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n    }\n    LeafletLayerDirective.prototype.ngOnInit = function () {\n        // Init the map\n        this.leafletDirective.init();\n    };\n    LeafletLayerDirective.prototype.ngOnDestroy = function () {\n        this.layer.remove();\n    };\n    LeafletLayerDirective.prototype.ngOnChanges = function (changes) {\n        if (changes['layer']) {\n            // Update the layer\n            var p = changes['layer'].previousValue;\n            var n = changes['layer'].currentValue;\n            if (null != p) {\n                p.remove();\n            }\n            if (null != n) {\n                this.leafletDirective.getMap().addLayer(n);\n            }\n        }\n    };\n    LeafletLayerDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[leafletLayer]'\n                },] },\n    ];\n    /** @nocollapse */\n    LeafletLayerDirective.ctorParameters = function () { return [\n        { type: LeafletDirective, },\n    ]; };\n    LeafletLayerDirective.propDecorators = {\n        'layer': [{ type: Input, args: ['leafletLayer',] },],\n    };\n    return LeafletLayerDirective;\n}());\nexport { LeafletLayerDirective };\n//# sourceMappingURL=leaflet-layer.directive.js.map","import { Directive, Input, IterableDiffers } from '@angular/core';\nimport { LeafletDirective } from '../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';\n/**\n * Layers directive\n *\n * This directive is used to directly control map layers. As changes are made to the input array of\n * layers, the map is synched to the array. As layers are added or removed from the input array, they\n * are also added or removed from the map. The input array is treated as immutable. To detect changes,\n * you must change the array instance.\n *\n * Important Note: The input layers array is assumed to be immutable. This means you need to use an\n * immutable array implementation or create a new copy of your array when you make changes, otherwise\n * this directive won't detect the change. This is by design. It's for performance reasons. Change\n * detection of mutable arrays requires diffing the state of the array on every DoCheck cycle, which\n * is extremely expensive from a time complexity perspective.\n *\n */\nvar LeafletLayersDirective = /** @class */ (function () {\n    function LeafletLayersDirective(leafletDirective, differs) {\n        this.differs = differs;\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n        this.layersDiffer = this.differs.find([]).create();\n    }\n    Object.defineProperty(LeafletLayersDirective.prototype, \"layers\", {\n        get: function () {\n            return this.layersValue;\n        },\n        // Set/get the layers\n        set: function (v) {\n            this.layersValue = v;\n            // Now that we have a differ, do an immediate layer update\n            this.updateLayers();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LeafletLayersDirective.prototype.ngDoCheck = function () {\n        this.updateLayers();\n    };\n    LeafletLayersDirective.prototype.ngOnInit = function () {\n        // Init the map\n        this.leafletDirective.init();\n        // Update layers once the map is ready\n        this.updateLayers();\n    };\n    LeafletLayersDirective.prototype.ngOnDestroy = function () {\n        this.layers = [];\n    };\n    /**\n     * Update the state of the layers.\n     * We use an iterable differ to synchronize the map layers with the state of the bound layers array.\n     * This is important because it allows us to react to changes to the contents of the array as well\n     * as changes to the actual array instance.\n     */\n    LeafletLayersDirective.prototype.updateLayers = function () {\n        var map = this.leafletDirective.getMap();\n        if (null != map && null != this.layersDiffer) {\n            var changes = this.layersDiffer.diff(this.layersValue);\n            if (null != changes) {\n                changes.forEachRemovedItem(function (c) {\n                    map.removeLayer(c.item);\n                });\n                changes.forEachAddedItem(function (c) {\n                    map.addLayer(c.item);\n                });\n            }\n        }\n    };\n    LeafletLayersDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[leafletLayers]'\n                },] },\n    ];\n    /** @nocollapse */\n    LeafletLayersDirective.ctorParameters = function () { return [\n        { type: LeafletDirective, },\n        { type: IterableDiffers, },\n    ]; };\n    LeafletLayersDirective.propDecorators = {\n        'layers': [{ type: Input, args: ['leafletLayers',] },],\n    };\n    return LeafletLayersDirective;\n}());\nexport { LeafletLayersDirective };\n//# sourceMappingURL=leaflet-layers.directive.js.map","var LeafletControlLayersChanges = /** @class */ (function () {\n    function LeafletControlLayersChanges() {\n        this.layersRemoved = 0;\n        this.layersChanged = 0;\n        this.layersAdded = 0;\n    }\n    LeafletControlLayersChanges.prototype.changed = function () {\n        return !(this.layersRemoved === 0 && this.layersChanged === 0 && this.layersAdded === 0);\n    };\n    return LeafletControlLayersChanges;\n}());\nexport { LeafletControlLayersChanges };\n//# sourceMappingURL=leaflet-control-layers-changes.model.js.map","import { control } from 'leaflet';\nimport { LeafletControlLayersChanges } from './leaflet-control-layers-changes.model';\nvar LeafletControlLayersWrapper = /** @class */ (function () {\n    function LeafletControlLayersWrapper() {\n    }\n    LeafletControlLayersWrapper.prototype.getLayersControl = function () {\n        return this.layersControl;\n    };\n    LeafletControlLayersWrapper.prototype.init = function (controlConfig, controlOptions) {\n        var baseLayers = controlConfig.baseLayers || {};\n        var overlays = controlConfig.overlays || {};\n        this.layersControl = control.layers(baseLayers, overlays, controlOptions);\n        return this.layersControl;\n    };\n    LeafletControlLayersWrapper.prototype.applyBaseLayerChanges = function (changes) {\n        var results = new LeafletControlLayersChanges();\n        if (null != this.layersControl) {\n            results = this.applyChanges(changes, this.layersControl.addBaseLayer);\n        }\n        return results;\n    };\n    LeafletControlLayersWrapper.prototype.applyOverlayChanges = function (changes) {\n        var results = new LeafletControlLayersChanges();\n        if (null != this.layersControl) {\n            results = this.applyChanges(changes, this.layersControl.addOverlay);\n        }\n        return results;\n    };\n    LeafletControlLayersWrapper.prototype.applyChanges = function (changes, addFn) {\n        var _this = this;\n        var results = new LeafletControlLayersChanges();\n        if (null != changes) {\n            changes.forEachChangedItem(function (c) {\n                _this.layersControl.removeLayer(c.previousValue);\n                addFn.call(_this.layersControl, c.currentValue, c.key);\n                results.layersChanged++;\n            });\n            changes.forEachRemovedItem(function (c) {\n                _this.layersControl.removeLayer(c.previousValue);\n                results.layersRemoved++;\n            });\n            changes.forEachAddedItem(function (c) {\n                addFn.call(_this.layersControl, c.currentValue, c.key);\n                results.layersAdded++;\n            });\n        }\n        return results;\n    };\n    return LeafletControlLayersWrapper;\n}());\nexport { LeafletControlLayersWrapper };\n//# sourceMappingURL=leaflet-control-layers.wrapper.js.map","var LeafletControlLayersConfig = /** @class */ (function () {\n    function LeafletControlLayersConfig() {\n        this.baseLayers = {};\n        this.overlays = {};\n    }\n    return LeafletControlLayersConfig;\n}());\nexport { LeafletControlLayersConfig };\n//# sourceMappingURL=leaflet-control-layers-config.model.js.map","import { Directive, Input, KeyValueDiffers } from '@angular/core';\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from './leaflet-control-layers.wrapper';\nimport { LeafletControlLayersConfig } from './leaflet-control-layers-config.model';\n/**\n * Layers Control\n *\n * This directive is used to configure the layers control. The input accepts an object with two\n * key-value maps of layer name -> layer. Mutable changes are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the last one it sees will be used.\n */\nvar LeafletLayersControlDirective = /** @class */ (function () {\n    function LeafletLayersControlDirective(leafletDirective, differs) {\n        this.differs = differs;\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n        this.controlLayers = new LeafletControlLayersWrapper();\n        // Generate differs\n        this.baseLayersDiffer = this.differs.find({}).create();\n        this.overlaysDiffer = this.differs.find({}).create();\n    }\n    Object.defineProperty(LeafletLayersControlDirective.prototype, \"layersControlConfig\", {\n        get: function () {\n            return this.layersControlConfigValue;\n        },\n        set: function (v) {\n            // Validation/init stuff\n            if (null == v) {\n                v = new LeafletControlLayersConfig();\n            }\n            if (null == v.baseLayers) {\n                v.baseLayers = {};\n            }\n            if (null == v.overlays) {\n                v.overlays = {};\n            }\n            // Store the value\n            this.layersControlConfigValue = v;\n            // Update the map\n            this.updateLayers();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LeafletLayersControlDirective.prototype.ngOnInit = function () {\n        // Init the map\n        this.leafletDirective.init();\n        // Set up all the initial settings\n        this.controlLayers\n            .init({}, this.layersControlOptions)\n            .addTo(this.leafletDirective.getMap());\n        this.updateLayers();\n    };\n    LeafletLayersControlDirective.prototype.ngOnDestroy = function () {\n        this.layersControlConfig = { baseLayers: {}, overlays: {} };\n        this.controlLayers.getLayersControl().remove();\n    };\n    LeafletLayersControlDirective.prototype.ngDoCheck = function () {\n        this.updateLayers();\n    };\n    LeafletLayersControlDirective.prototype.updateLayers = function () {\n        var map = this.leafletDirective.getMap();\n        var layersControl = this.controlLayers.getLayersControl();\n        if (null != map && null != layersControl) {\n            // Run the baselayers differ\n            if (null != this.baseLayersDiffer && null != this.layersControlConfigValue.baseLayers) {\n                var changes = this.baseLayersDiffer.diff(this.layersControlConfigValue.baseLayers);\n                this.controlLayers.applyBaseLayerChanges(changes);\n            }\n            // Run the overlays differ\n            if (null != this.overlaysDiffer && null != this.layersControlConfigValue.overlays) {\n                var changes = this.overlaysDiffer.diff(this.layersControlConfigValue.overlays);\n                this.controlLayers.applyOverlayChanges(changes);\n            }\n        }\n    };\n    LeafletLayersControlDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[leafletLayersControl]'\n                },] },\n    ];\n    /** @nocollapse */\n    LeafletLayersControlDirective.ctorParameters = function () { return [\n        { type: LeafletDirective, },\n        { type: KeyValueDiffers, },\n    ]; };\n    LeafletLayersControlDirective.propDecorators = {\n        'layersControlConfig': [{ type: Input, args: ['leafletLayersControl',] },],\n        'layersControlOptions': [{ type: Input, args: ['leafletLayersControlOptions',] },],\n    };\n    return LeafletLayersControlDirective;\n}());\nexport { LeafletLayersControlDirective };\n//# sourceMappingURL=leaflet-control-layers.directive.js.map","var LeafletUtil = /** @class */ (function () {\n    function LeafletUtil() {\n    }\n    LeafletUtil.mapToArray = function (map) {\n        var toReturn = [];\n        for (var k in map) {\n            if (map.hasOwnProperty(k)) {\n                toReturn.push(map[k]);\n            }\n        }\n        return toReturn;\n    };\n    return LeafletUtil;\n}());\nexport { LeafletUtil };\n//# sourceMappingURL=leaflet.util.js.map","import { Directive, Input, KeyValueDiffers } from '@angular/core';\nimport { LeafletUtil } from '../../core/leaflet.util';\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from '../control/leaflet-control-layers.wrapper';\n/**\n * Baselayers directive\n *\n * This directive is provided as a convenient way to add baselayers to the map. The input accepts\n * a key-value map of layer name -> layer. Mutable changed are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed. This directive\n * will also add the layers control so users can switch between available base layers.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the plugin will use the last one it sees.\n */\nvar LeafletBaseLayersDirective = /** @class */ (function () {\n    function LeafletBaseLayersDirective(leafletDirective, differs) {\n        this.differs = differs;\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n        this.controlLayers = new LeafletControlLayersWrapper();\n        this.baseLayersDiffer = this.differs.find({}).create();\n    }\n    Object.defineProperty(LeafletBaseLayersDirective.prototype, \"baseLayers\", {\n        get: function () {\n            return this.baseLayersValue;\n        },\n        // Set/get baseLayers\n        set: function (v) {\n            this.baseLayersValue = v;\n            this.updateBaseLayers();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LeafletBaseLayersDirective.prototype.ngOnDestroy = function () {\n        this.baseLayers = {};\n        this.controlLayers.getLayersControl().remove();\n    };\n    LeafletBaseLayersDirective.prototype.ngOnInit = function () {\n        // Init the map\n        this.leafletDirective.init();\n        // Initially configure the controlLayers\n        this.controlLayers\n            .init({}, this.layersControlOptions)\n            .addTo(this.leafletDirective.getMap());\n        this.updateBaseLayers();\n    };\n    LeafletBaseLayersDirective.prototype.ngDoCheck = function () {\n        this.updateBaseLayers();\n    };\n    LeafletBaseLayersDirective.prototype.updateBaseLayers = function () {\n        var map = this.leafletDirective.getMap();\n        var layersControl = this.controlLayers.getLayersControl();\n        if (null != map && null != layersControl && null != this.baseLayersDiffer) {\n            var changes = this.baseLayersDiffer.diff(this.baseLayersValue);\n            var results = this.controlLayers.applyBaseLayerChanges(changes);\n            if (results.changed()) {\n                this.syncBaseLayer();\n            }\n        }\n    };\n    /**\n     * Check the current base layer and change it to the new one if necessary\n     */\n    LeafletBaseLayersDirective.prototype.syncBaseLayer = function () {\n        var map = this.leafletDirective.getMap();\n        var layers = LeafletUtil.mapToArray(this.baseLayers);\n        var foundLayer;\n        // Search all the layers in the map to see if we can find them in the baselayer array\n        map.eachLayer(function (l) {\n            foundLayer = layers.find(function (bl) { return (l === bl); });\n        });\n        // Did we find the layer?\n        if (null != foundLayer) {\n            // Yes - set the baselayer to the one we found\n            this.baseLayer = foundLayer;\n        }\n        else {\n            // No - set the baselayer to the first in the array and add it to the map\n            if (layers.length > 0) {\n                this.baseLayer = layers[0];\n                this.baseLayer.addTo(map);\n            }\n        }\n    };\n    LeafletBaseLayersDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[leafletBaseLayers]'\n                },] },\n    ];\n    /** @nocollapse */\n    LeafletBaseLayersDirective.ctorParameters = function () { return [\n        { type: LeafletDirective, },\n        { type: KeyValueDiffers, },\n    ]; };\n    LeafletBaseLayersDirective.propDecorators = {\n        'baseLayers': [{ type: Input, args: ['leafletBaseLayers',] },],\n        'layersControlOptions': [{ type: Input, args: ['leafletLayersControlOptions',] },],\n    };\n    return LeafletBaseLayersDirective;\n}());\nexport { LeafletBaseLayersDirective };\n//# sourceMappingURL=leaflet-baselayers.directive.js.map","import { NgModule } from '@angular/core';\nimport { LeafletDirective } from './core/leaflet.directive';\nimport { LeafletLayerDirective } from './layers/leaflet-layer.directive';\nimport { LeafletLayersDirective } from './layers/leaflet-layers.directive';\nimport { LeafletLayersControlDirective } from './layers/control/leaflet-control-layers.directive';\nimport { LeafletBaseLayersDirective } from './layers/base/leaflet-baselayers.directive';\nvar LeafletModule = /** @class */ (function () {\n    function LeafletModule() {\n    }\n    LeafletModule.forRoot = function () {\n        return { ngModule: LeafletModule, providers: [] };\n    };\n    LeafletModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [\n                        LeafletDirective,\n                        LeafletLayerDirective,\n                        LeafletLayersDirective,\n                        LeafletLayersControlDirective,\n                        LeafletBaseLayersDirective\n                    ],\n                    declarations: [\n                        LeafletDirective,\n                        LeafletLayerDirective,\n                        LeafletLayersDirective,\n                        LeafletLayersControlDirective,\n                        LeafletBaseLayersDirective\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    LeafletModule.ctorParameters = function () { return []; };\n    return LeafletModule;\n}());\nexport { LeafletModule };\n//# sourceMappingURL=leaflet.module.js.map","import { tileLayer } from 'leaflet';\nvar LeafletTileLayerDefinition = /** @class */ (function () {\n    function LeafletTileLayerDefinition(type, url, options) {\n        this.type = type;\n        this.url = url;\n        this.options = options;\n    }\n    /**\n     * Creates a TileLayer from the provided definition. This is a convenience function\n     * to help with generating layers from objects.\n     *\n     * @param layerDef The layer to create\n     * @returns {TileLayer} The TileLayer that has been created\n     */\n    LeafletTileLayerDefinition.createTileLayer = function (layerDef) {\n        var layer;\n        switch (layerDef.type) {\n            case 'xyz':\n                layer = tileLayer(layerDef.url, layerDef.options);\n                break;\n            case 'wms':\n            default:\n                layer = tileLayer.wms(layerDef.url, layerDef.options);\n                break;\n        }\n        return layer;\n    };\n    /**\n     * Creates a TileLayer for each key in the incoming map. This is a convenience function\n     * for generating an associative array of layers from an associative array of objects\n     *\n     * @param layerDefs A map of key to tile layer definition\n     * @returns {{[p: string]: TileLayer}} A new map of key to TileLayer\n     */\n    LeafletTileLayerDefinition.createTileLayers = function (layerDefs) {\n        var layers = {};\n        for (var k in layerDefs) {\n            if (layerDefs.hasOwnProperty(k)) {\n                layers[k] = (LeafletTileLayerDefinition.createTileLayer(layerDefs[k]));\n            }\n        }\n        return layers;\n    };\n    /**\n     * Create a Tile Layer from the current state of this object\n     *\n     * @returns {TileLayer} A new TileLayer\n     */\n    LeafletTileLayerDefinition.prototype.createTileLayer = function () {\n        return LeafletTileLayerDefinition.createTileLayer(this);\n    };\n    return LeafletTileLayerDefinition;\n}());\nexport { LeafletTileLayerDefinition };\n//# sourceMappingURL=leaflet-tile-layer-definition.model.js.map"],"names":["latLng","EventEmitter","map","Directive","ElementRef","Input","Output","HostListener","IterableDiffers","control","KeyValueDiffers","NgModule","tileLayer"],"mappings":"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"}